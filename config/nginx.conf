# this nginx config is for production running on an EC2 instance
# not for development

# Limit each IP to 5 requests per second, with a burst of up to 10
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=5r/s;

server {
    if ($host = api.go-sandbox.org) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    server_name api.go-sandbox.org;

    # redirect to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name api.go-sandbox.org;
    ssl_certificate /etc/letsencrypt/live/api.go-sandbox.org/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/api.go-sandbox.org/privkey.pem; # managed by Certbot

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # for github webhook for jenkins
    location /github-webhook/ {
        proxy_pass http://localhost:8080/github-webhook/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # NEW: location for WebSocket
    location /ws {
        # Pass to your backend that listens on 3000 (or 3000/ws).
        proxy_pass http://localhost:3000/ws;  # adjust if your backend uses a different path

        proxy_http_version 1.1;              # HTTP 1.1 is required for WebSocket
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;

        # Potentially reuse your limit_req if desired, or omit it for WS:
        # limit_req zone=api_limit burst=10 nodelay;
    }

    # for api server
    location / {
        limit_req zone=api_limit burst=10 nodelay;
        proxy_pass http://localhost:3000;

        # for CORS
        set $cors '';
        if ($http_origin ~ '^https?://(localhost|www\.go-sandbox\.org|go-sandbox\.org$)') {
                set $cors 'true';
        }

        if ($cors = 'true') {
                add_header 'Access-Control-Allow-Origin' "$http_origin" always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
                add_header 'Access-Control-Expose-Headers' 'Authorization' always;
        }

        if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' "$http_origin" always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
                add_header 'Access-Control-Max-Age' 1728000; # Tell client that this pre-flight info is valid for 20 days
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
        }

        # disable buffering
        proxy_buffering off;

        # 兼容 SSE 的额外推荐设置
        proxy_cache off;
        proxy_http_version 1.1;

        proxy_set_header Connection '';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
